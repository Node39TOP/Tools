#!/bin/bash

# =========================================================================
# C√°c bi·∫øn c·∫•u h√¨nh - Vui l√≤ng ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn
# =========================================================================

# Th∆∞ m·ª•c g·ªëc c·ªßa Pactus, n∆°i ch·ª©a pactus-daemon, pactus-wallet v√† th∆∞ m·ª•c data.
# ƒê·∫£m b·∫£o pactus-daemon v√† pactus-wallet c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c thi t·ª´ ƒë√¢y.
PAC_HOME="$HOME/node_pactus"
PAC_DAEMON="$PAC_HOME/pactus-daemon"
PAC_WALLET="$PAC_HOME/pactus-wallet"
REWARD_ADDRESS=""

# =========================================================================
# C√°c h√†m tr·ª£ gi√∫p
# =========================================================================

# H√†m l·∫•y t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ v√≠ v√† g√°n cho bi·∫øn to√†n c·ª•c ADDRESSES_LIVE
# c≈©ng nh∆∞ x√°c ƒë·ªãnh REWARD_ADDRESS
get_all_addresses() {
    echo "ƒêang t·∫£i danh s√°ch v√≠ t·ª´ Pactus Wallet..."
    local raw_output=$("$PAC_WALLET" address all 2>&1) # Chuy·ªÉn c·∫£ stdout v√† stderr v√†o bi·∫øn ƒë·ªÉ ki·ªÉm tra l·ªói
    local exit_code=$?
    
    # Ki·ªÉm tra xem l·ªánh c√≥ ch·∫°y th√†nh c√¥ng kh√¥ng
    if [ $exit_code -ne 0 ]; then
        echo "‚ö†Ô∏è L·ªói khi ch·∫°y l·ªánh '$PAC_WALLET address all'."
        echo ""
        echo "Chi ti·∫øt l·ªói: $raw_output"
        echo ""
        echo "Vui l√≤ng ki·ªÉm tra: "
        echo "  - ƒê∆∞·ªùng d·∫´n ƒë·∫øn pactus-wallet ($PAC_WALLET) c√≥ ƒë√∫ng kh√¥ng?"
        echo "  - pactus-wallet c√≥ quy·ªÅn th·ª±c thi kh√¥ng? (chmod +x $PAC_WALLET)"
        echo "  - V√≠ Pactus c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c√≥ ƒëang ho·∫°t ƒë·ªông/m·ªü kh√≥a kh√¥ng?"
        ADDRESSES_LIVE=()
        REWARD_ADDRESS=""
        return 1
    fi

    # X√≥a m·∫£ng ADDRESSES_LIVE c≈©
    unset ADDRESSES_LIVE
    declare -g -a ADDRESSES_LIVE=() # Khai b√°o l·∫°i l√† m·∫£ng to√†n c·ª•c
    
    REWARD_ADDRESS="" # Reset reward address
    local temp_reward_address="" # Bi·∫øn t·∫°m ƒë·ªÉ l∆∞u reward address ƒë·∫ßu ti√™n t√¨m th·∫•y
    
    # ƒê·ªçc t·ª´ng d√≤ng ƒë·∫ßu ra v√† ph√¢n t√≠ch b·∫±ng awk
    # Awk s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω c√°c kho·∫£ng tr·∫Øng, bao g·ªìm c·∫£ non-breaking spaces v√† tabs.
    # N√≥ c≈©ng b·ªè qua c√°c d√≤ng kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng "pc1"
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒëi·ªÅu khi·ªÉn/kh√¥ng in ƒë∆∞·ª£c v√† k√Ω t·ª± s·ªë th·ª© t·ª± (v√≠ d·ª• "1- ")
        local processed_line=$(echo "$line" | tr -d '\r' | sed 's/[^[:print:]\t]//g' | sed -E 's/^[0-9]+-\s*//')
        
        # S·ª≠ d·ª•ng awk ƒë·ªÉ t√°ch ƒë·ªãa ch·ªâ v√† ph·∫ßn m√¥ t·∫£ c√≤n l·∫°i
        local address_part=$(echo "$processed_line" | awk '/^pc1/ {print $1}')
        local description_part=$(echo "$processed_line" | awk '/^pc1/ {for(i=2;i<=NF;i++) printf "%s ", $i; print ""}' | sed 's/ $//')

        if [[ -z "$address_part" ]]; then
            continue # B·ªè qua n·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ Pactus h·ª£p l·ªá
        fi

        local type_display=""
        if [[ "$description_part" =~ "Reward address" ]]; then
            type_display="Reward address"
            if [[ -z "$temp_reward_address" ]]; then
                temp_reward_address="$address_part"
            fi
        elif [[ "$description_part" =~ "Validator address" ]]; then
            # Tr√≠ch xu·∫•t s·ªë validator t·ª´ m√¥ t·∫£
            local validator_number=$(echo "$description_part" | grep -oP 'Validator address \K[0-9]+' | head -n 1)
            if [[ -n "$validator_number" ]]; then
                type_display="Validator address $validator_number"
            else
                type_display="Validator address (s·ªë kh√¥ng x√°c ƒë·ªãnh)" # Fallback
            fi
        else
            type_display="Unknown type"
        fi
        
        ADDRESSES_LIVE+=("$address_part:$type_display")

    done <<< "$raw_output"
    
    REWARD_ADDRESS="$temp_reward_address"

    if [ ${#ADDRESSES_LIVE[@]} -eq 0 ]; then
        echo "L∆∞u √Ω: Script kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ h·ª£p l·ªá n√†o trong ƒë·∫ßu ra c·ªßa Pactus Wallet."
        return 1
    fi
    return 0
}

# H√†m hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ v√≠ ƒë√£ l·∫•y ƒë∆∞·ª£c
display_live_addresses() {
    if ! get_all_addresses; then
        echo "Kh√¥ng th·ªÉ hi·ªÉn th·ªã danh s√°ch v√≠ do l·ªói t·∫£i d·ªØ li·ªáu."
        return 1
    fi

    if [ ${#ADDRESSES_LIVE[@]} -eq 0 ]; then
        echo "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ n√†o. H√£y ƒë·∫£m b·∫£o v√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† Pactus Wallet ƒëang ho·∫°t ƒë·ªông."
        return 1
    fi

    echo "---"
    echo "## Danh s√°ch v√≠ Pactus c·ªßa b·∫°n"
    echo "---"
    for i in "${!ADDRESSES_LIVE[@]}"; do
        local entry="${ADDRESSES_LIVE[$i]}"
        local address=$(echo "$entry" | cut -d':' -f1)
        local type_info=$(echo "$entry" | cut -d':' -f2)

        # S·ª≠ d·ª•ng th√¥ng tin lo·∫°i ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch ch√≠nh x√°c
        # Hi·ªÉn th·ªã s·ªë th·ª© t·ª± cho Validator address theo s·ªë ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t
        if [[ "$type_info" =~ "Validator address " ]]; then
            echo "$((i+1))- ${address} (${type_info})"
        else
            echo "$((i+1))- ${address} (${type_info})"
        fi
    done
    echo ""
    return 0
}

# H√†m ki·ªÉm tra xem ƒë·ªãa ch·ªâ c√≥ ph·∫£i l√† validator kh√¥ng
is_validator_address() {
    local address_to_check=$1
    for entry in "${ADDRESSES_LIVE[@]}"; do
        local address=$(echo "$entry" | cut -d':' -f1)
        local type_info=$(echo "$entry" | cut -d':' -f2)
        if [[ "$address" == "$address_to_check" && "$type_info" =~ "Validator address" ]]; then
            return 0 # L√† validator
        fi
    done
    return 1 # Kh√¥ng ph·∫£i validator
}


# H√†m hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ v√≠ ƒë√£ l·∫•y ƒë∆∞·ª£c
display_live_addresses() {
    if ! get_all_addresses; then
        echo "Kh√¥ng th·ªÉ hi·ªÉn th·ªã danh s√°ch v√≠ do l·ªói t·∫£i d·ªØ li·ªáu."
        return 1
    fi

    if [ ${#ADDRESSES_LIVE[@]} -eq 0 ]; then
        echo "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ n√†o. H√£y ƒë·∫£m b·∫£o v√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† Pactus Wallet ƒëang ho·∫°t ƒë·ªông."
        return 1
    fi

    echo "---"
    echo "## Danh s√°ch v√≠ Pactus c·ªßa b·∫°n"
    echo "---"
    for i in "${!ADDRESSES_LIVE[@]}"; do
        local entry="${ADDRESSES_LIVE[$i]}"
        local address=$(echo "$entry" | cut -d':' -f1)
        local type_info=$(echo "$entry" | cut -d':' -f2)

        # S·ª≠ d·ª•ng th√¥ng tin lo·∫°i ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch ch√≠nh x√°c
        echo "$((i+1))- ${address} (${type_info})"
    done
    echo ""
    return 0
}

# H√†m ki·ªÉm tra xem ƒë·ªãa ch·ªâ c√≥ ph·∫£i l√† validator kh√¥ng
# H√†m n√†y c·∫ßn ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng th√¥ng tin type_info ch√≠nh x√°c t·ª´ ADDRESSES_LIVE
is_validator_address() {
    local address_to_check=$1
    for entry in "${ADDRESSES_LIVE[@]}"; do
        local address=$(echo "$entry" | cut -d':' -f1)
        local type_info=$(echo "$entry" | cut -d':' -f2)
        if [[ "$address" == "$address_to_check" && "$type_info" =~ "Validator address" ]]; then
            return 0 # L√† validator
        fi
    done
    return 1 # Kh√¥ng ph·∫£i validator
}

# H√†m hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ c√°c ƒë·ªãa ch·ªâ v√≠ ƒë√£ l·∫•y ƒë∆∞·ª£c
display_live_addresses() {
    if ! get_all_addresses; then
        echo "Kh√¥ng th·ªÉ hi·ªÉn th·ªã danh s√°ch v√≠ do l·ªói t·∫£i d·ªØ li·ªáu."
        return 1
    fi

    if [ ${#ADDRESSES_LIVE[@]} -eq 0 ]; then
        echo "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ n√†o. H√£y ƒë·∫£m b·∫£o v√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† Pactus Wallet ƒëang ho·∫°t ƒë·ªông."
        return 1
    fi

    echo "---"
    echo "## Danh s√°ch v√≠ Pactus c·ªßa b·∫°n"
    echo "---"
    local validator_count=0
    for i in "${!ADDRESSES_LIVE[@]}"; do
        local entry="${ADDRESSES_LIVE[$i]}"
        local address=$(echo "$entry" | cut -d':' -f1)
        local type_info=$(echo "$entry" | cut -d':' -f2)

        if [[ "$type_info" == "Reward address" ]]; then
            echo "$((i+1))- ${address} (Reward address)"
        elif [[ "$type_info" == "Validator address $((i))" ]]; then
            validator_count=$((validator_count+1))
            echo "$((i+1))- ${address} (Validator address ${validator_count})"
        else
            echo "$((i+1))- ${address} (${type_info})"
        fi
    done
    echo ""
    return 0
}

# H√†m l·∫•y ƒë·ªãa ch·ªâ v√≠ d·ª±a tr√™n s·ªë th·ª© t·ª± (1-indexed) m√† ng∆∞·ªùi d√πng nh·∫≠p
# Tr·∫£ v·ªÅ ƒë·ªãa ch·ªâ (ch·ªâ ƒë·ªãa ch·ªâ, kh√¥ng c√≥ lo·∫°i)
get_address_by_live_index() {
    local index=$1
    if (( index > 0 && index <= ${#ADDRESSES_LIVE[@]} )); then
        echo "${ADDRESSES_LIVE[index-1]}" | cut -d':' -f1
    else
        echo ""
    fi
}

# H√†m ki·ªÉm tra xem ƒë·ªãa ch·ªâ c√≥ ph·∫£i l√† validator kh√¥ng
is_validator_address() {
    local address_to_check=$1
    for entry in "${ADDRESSES_LIVE[@]}"; do
        local address=$(echo "$entry" | cut -d':' -f1)
        local type_info=$(echo "$entry" | cut -d':' -f2)
        if [[ "$address" == "$address_to_check" && "$type_info" == *"Validator address"* ]]; then
            return 0 # L√† validator
        fi
    done
    return 1 # Kh√¥ng ph·∫£i validator
}

# =========================================================================
# C√°c ch·ª©c nƒÉng ch√≠nh c·ªßa menu
# =========================================================================

# Hi·ªÉn th·ªã menu ch√≠nh
show_menu() {
    clear
    echo "---------------------------------------------"
    echo "           üß≠ MENU CH√çNH - PACTUS TOOL"
    echo "         ‚ö†Ô∏è D√†nh ri√™ng cho Node39.TOP Guide"
    echo "üîó H∆∞·ªõng d·∫´n: https://node39.top/docs/Mainnet/Pactus-Blockchain/"
    echo "---------------------------------------------"
    echo " 1  - üìã Danh s√°ch v√≠ c·ªßa b·∫°n"
    echo " 2  - üí∞ Ki·ªÉm tra s·ªë d∆∞"
    echo " 3  - üîÅ Chuy·ªÉn Token"
    echo " 4  - ‚öôÔ∏è  Bond v√†o Validator"
    echo " 5  - üß© Unbond Validator"
    echo " 6  - üéÅ R√∫t ph·∫ßn th∆∞·ªüng (sau khi unbond)"
    echo " 7  - ‚ôªÔ∏è  Kh√¥i ph·ª•c v√≠ reward (phi√™n b·∫£n c≈©)"
    echo " 8  - üîê Xem 12 k√Ω t·ª± b√≠ m·∫≠t (Seed)"
    echo " 9  - üì¶ T·∫£i Snapshot"
    echo " 0  - üö™ Tho√°t"
    echo "---------------------------------------------"
    echo -n "üîΩ Nh·∫≠p s·ªë th·ª© t·ª± trong menu: "
}

# 0 - T·∫£i Snapshot
download_snapshot() {
    echo "---"
    echo "## T·∫£i Snapshot"
    echo "---"
    echo "L∆∞u √Ω: Sau khi t·∫£i l·∫°i snapshot, c√°c d·ªØ li·ªáu s·∫Ω c·∫≠p nh·∫≠t l·∫°i theo ng√†y b·∫°n t·∫£i snapshot."
    echo "Vui l√≤ng d·ª´ng Validator tr∆∞·ªõc khi t·∫£i snapshot."
    echo ""
    read -p "Nh·∫•n 'y' ƒë·ªÉ t·∫£i snapshot, ho·∫∑c b·∫•t k·ª≥ ph√≠m n√†o kh√°c ƒë·ªÉ quay l·∫°i menu ch√≠nh: " -n 1 -r
    echo "" # Th√™m d√≤ng m·ªõi sau khi ƒë·ªçc input
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "ƒêang x√≥a d·ªØ li·ªáu c≈© v√† t·∫£i snapshot..."
        rm -rf "$PAC_HOME/.pactus.lock"
        rm -rf "$PAC_HOME/data"
        "$PAC_DAEMON" import
        echo "‚úÖ T·∫£i snapshot ho√†n t·∫•t."
    else
        echo "‚ùå H·ªßy t·∫£i snapshot."
    fi
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
}

# 1 - Danh s√°ch v√≠
list_addresses_option() {
    echo "---"
    echo "## Danh s√°ch v√≠ c·ªßa b·∫°n"
    echo "---"
    display_live_addresses
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
}

# 2 - Xem 12 k√Ω t·ª± b√≠ m·∫≠t (Seed)
show_mnemonic() {
    echo "---"
    echo "## Xem 12 k√Ω t·ª± b√≠ m·∫≠t (Seed)"
    echo "---"
    echo "‚ö†Ô∏è ƒê√¢y l√† 12 t·ª´ ƒë·∫∑c bi·ªát b√≠ m·∫≠t c·ªßa v√≠ b·∫°n."
    echo "üö∑ B·∫•t c·ª© trang web n√†o y√™u c·∫ßu b·∫°n cung c·∫•p th√¨ ƒë√≥ l√† l·ª´a ƒë·∫£o."
    echo "üö´ N·∫øu b·∫°n cung c·∫•p cho b·∫•t c·ª© ai, b·∫°n c√≥ th·ªÉ m·∫•t to√†n b·ªô s·ªë ti·ªÅn trong v√≠."
    echo ""
    read -p "Nh·∫•n 'y' n·∫øu b·∫°n ƒë√£ hi·ªÉu r√µ v√† mu·ªën ti·∫øp t·ª•c xem, ho·∫∑c 'Enter' ƒë·ªÉ quay l·∫°i menu ch√≠nh: " -n 1 -r
    echo "" # Th√™m d√≤ng m·ªõi sau khi ƒë·ªçc input
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        "$PAC_WALLET" seed
    else
        echo "H·ªßy xem 12 k√Ω t·ª± b√≠ m·∫≠t."
    fi
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
}

# 3 - Ki·ªÉm tra s·ªë d∆∞
check_balance() {
    echo "---"
    echo "## Ki·ªÉm tra s·ªë d∆∞"
    echo "---"
    while true; do
        if ! display_live_addresses; then
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi

        echo "Nh·∫≠p 'a' ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ c√°c v√≠."
        echo "Nh·∫≠p 'q' ƒë·ªÉ tho√°t (V·ªÅ menu ch√≠nh)."
        read -p "Nh·∫≠p s·ªë th·ª© t·ª± v√≠ c·∫ßn ki·ªÉm tra: " choice

        if [[ "$choice" == "q" ]]; then
            break
        elif [[ "$choice" == "a" ]]; then
            echo "ƒêang ki·ªÉm tra s·ªë d∆∞ cho t·∫•t c·∫£ c√°c v√≠..."
            for entry in "${ADDRESSES_LIVE[@]}"; do
                local addr=$(echo "$entry" | cut -d':' -f1)
                echo "---"
                echo "S·ªë d∆∞ c·ªßa $addr:"
                "$PAC_WALLET" address balance "$addr"
            done
            echo "---"
        elif [[ "$choice" =~ ^[0-9]+$ ]]; then
            selected_address=$(get_address_by_live_index "$choice")
            if [[ -n "$selected_address" ]]; then
                echo "S·ªë d∆∞ c·ªßa $selected_address:"
                "$PAC_WALLET" address balance "$selected_address"
            else
                echo "‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± h·ª£p l·ªá."
            fi
        else 
            echo "‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
            echo ""
            echo "Nh·∫≠p 'a' ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ v√≠"
            echo ""
            echo "Nh·∫≠p 'q' ƒë·ªÉ tho√°t"
            echo ""
            echo "Ho·∫∑c nh·∫≠p s·ªë th·ª© t·ª± v√≠ c·∫ßn ki·ªÉm tra"
        fi
        echo ""
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c ki·ªÉm tra s·ªë d∆∞, ho·∫∑c 'q' ƒë·ªÉ tho√°t v·ªÅ menu ch√≠nh." next_action
        if [[ "$next_action" == "q" ]]; then
            break
        fi
    done
}

# =========================================================================
# C√°c ch·ª©c nƒÉng ch√≠nh c·ªßa menu (Th·ª±c thi l·ªánh th·ªß c√¥ng)
# =========================================================================

# 4 - Chuy·ªÉn Token
transfer_token() {
    echo "---"
    echo "## Chuy·ªÉn Token"
    echo "---"
    if ! get_all_addresses; then
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi
    
    if [[ -z "$REWARD_ADDRESS" ]]; then
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ Reward. Vui l√≤ng ƒë·∫£m b·∫£o v√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c√≥ m·ªôt ƒë·ªãa ch·ªâ Reward."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    local continue_transfer="y"
    while [[ "$continue_transfer" =~ ^[Yy]$ ]]; do
        local sender_address="$REWARD_ADDRESS"
        echo ""
        echo "V√≠ ngu·ªìn - Reward address: ${sender_address}"
        echo ""
        echo "Nh·∫≠p 'q' ƒë·ªÉ tho√°t"
        echo ""
        read -p "Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ ng∆∞·ªùi nh·∫≠n: " receiver_address
        if [[ "$receiver_address" == "q" ]]; then
            echo "H·ªßy chuy·ªÉn token."
            break # Tho√°t kh·ªèi v√≤ng l·∫∑p chuy·ªÉn token
        fi

        read -p "Nh·∫≠p s·ªë l∆∞·ª£ng PAC mu·ªën chuy·ªÉn: " amount
        if [[ "$amount" == "q" ]]; then # C≈©ng cho ph√©p tho√°t n·∫øu nh·∫≠p 'q' ·ªü s·ªë l∆∞·ª£ng
            echo "H·ªßy chuy·ªÉn token."
            break # Tho√°t kh·ªèi v√≤ng l·∫∑p chuy·ªÉn token
        fi

        if [[ -z "$receiver_address" || -z "$amount" ]]; then
            echo "‚ö†Ô∏è ƒê·ªãa ch·ªâ v√≠ ng∆∞·ªùi nh·∫≠n ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi

        echo ""
        echo "--- TH√îNG TIN GIAO D·ªäCH CHUY·ªÇN TOKEN ---"
        echo "B·∫°n s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u v√≠ v√† x√°c nh·∫≠n sau khi l·ªánh ch·∫°y."
        echo "----------------------------------------"
        echo ""
        
        "$PAC_WALLET" tx transfer "$sender_address" "$receiver_address" "$amount"
        
        echo ""
        echo "‚úÖ L·ªánh chuy·ªÉn token ƒë√£ ƒë∆∞·ª£c th·ª±c thi."
        echo "Vui l√≤ng ki·ªÉm tra ƒë·∫ßu ra ph√≠a tr√™n ƒë·ªÉ bi·∫øt tr·∫°ng th√°i."
        
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c chuy·ªÉn ho·∫∑c quay v·ªÅ menu ch√≠nh." next_action_transfer
        if [[ "$next_action_transfer" =~ ^[Nn]$ ]]; then
             break
        fi

        read -p "Nh·∫≠p 'y' ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c Enter ƒë·ªÉ quay v·ªÅ menu ch√≠nh): " -n 1 -r continue_transfer
        echo ""
        if [[ ! "$continue_transfer" =~ ^[Yy]$ ]]; then
            break
        fi
    done
}

# 5 - Bond to Validator
bond_to_validator() {
    echo "---"
    echo "## Bond to Validator"
    echo "---"
    if ! get_all_addresses; then
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    if [[ -z "$REWARD_ADDRESS" ]]; then
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ Reward ƒë·ªÉ th·ª±c hi·ªán Bond. Vui l√≤ng ƒë·∫£m b·∫£o v√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c√≥ m·ªôt ƒë·ªãa ch·ªâ Reward."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    local continue_bond="y"
    while [[ "$continue_bond" =~ ^[Yy]$ ]]; do
        if ! display_live_addresses; then
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi
        local reward_addr="$REWARD_ADDRESS" # V√≠ m·∫∑c ƒë·ªãnh (ngu·ªìn) l√† v√≠ reward
        echo "V√≠ ngu·ªìn - Reward address: ${reward_addr}"

        read -p "Nh·∫≠p s·ªë th·ª© t·ª± validator c·∫ßn bond: " validator_num
        local validator_address=$(get_address_by_live_index "$validator_num")

        if [[ -z "$validator_address" ]]; then
            echo "L·ª±a ch·ªçn validator kh√¥ng h·ª£p l·ªá."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi
        if ! is_validator_address "$validator_address"; then
            echo "‚ö†Ô∏è ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn kh√¥ng ph·∫£i l√† ƒë·ªãa ch·ªâ Validator."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi

        read -p "Nh·∫≠p s·ªë l∆∞·ª£ng PAC mu·ªën bond: " amount

        if [[ -z "$amount" ]]; then
            echo "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi

        echo ""
        echo "--- TH√îNG TIN GIAO D·ªäCH BOND ---"
        echo "B·∫°n s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u v√≠ v√† x√°c nh·∫≠n sau khi l·ªánh ch·∫°y."
        echo "--------------------------------"
        echo ""
        
        # Th·ª±c thi l·ªánh pactus-wallet tr·ª±c ti·∫øp. Ng∆∞·ªùi d√πng s·∫Ω nh·∫≠p m·∫≠t kh·∫©u v√† 'y' th·ªß c√¥ng.
        "$PAC_WALLET" tx bond "$reward_addr" "$validator_address" "$amount"
        
        echo ""
        echo "‚úÖ L·ªánh bond ƒë√£ ƒë∆∞·ª£c th·ª±c thi."
        echo "Vui l√≤ng ki·ªÉm tra ƒë·∫ßu ra ph√≠a tr√™n ƒë·ªÉ bi·∫øt tr·∫°ng th√°i."

        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c bond ho·∫∑c quay v·ªÅ menu ch√≠nh." next_action_bond
        if [[ "$next_action_bond" =~ ^[Nn]$ ]]; then
             break
        fi

        read -p "nh·∫≠p 'y' ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c Enter ƒë·ªÉ quay v·ªÅ menu ch√≠nh): " -n 1 -r continue_bond
        echo ""
        if [[ ! "$continue_bond" =~ ^[Yy]$ ]]; then
            break
        fi
    done
}

# 6 - Unbond
unbond_validator() {
    echo "---"
    echo "## Unbond Validator"
    echo "---"
    if ! get_all_addresses; then
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    local continue_unbond="y"
    while [[ "$continue_unbond" =~ ^[Yy]$ ]]; do
        if ! display_live_addresses; then
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi
        echo "‚ö†Ô∏è L∆∞u √Ω:"
        echo ""
        echo "- Unbond c·∫ßn ƒë·ª£i 181440 blocks t∆∞∆°ng ƒë∆∞∆°ng 21 ng√†y."
        echo "- Sau th·ªùi gian tr√™n, vui l√≤ng ch·∫°y l·ªánh **R√∫t ph·∫ßn th∆∞·ªüng** tr√™n menu s·ªë 7."

        read -p "Nh·∫≠p s·ªë th·ª© t·ª± validator c·∫ßn unbond: " validator_num
        local validator_address=$(get_address_by_live_index "$validator_num")

        if [[ -z "$validator_address" ]]; then
            echo "L·ª±a ch·ªçn validator kh√¥ng h·ª£p l·ªá."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi
        if ! is_validator_address "$validator_address"; then
            echo "‚ùå ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn kh√¥ng ph·∫£i l√† ƒë·ªãa ch·ªâ Validator."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
            return
        fi

        echo ""
        echo "--- TH√îNG TIN GIAO D·ªäCH UNBOND ---"
        echo "B·∫°n s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u v√≠ v√† x√°c nh·∫≠n sau khi l·ªánh ch·∫°y."
        echo "----------------------------------"
        echo ""
        
        # Th·ª±c thi l·ªánh pactus-wallet tr·ª±c ti·∫øp. Ng∆∞·ªùi d√πng s·∫Ω nh·∫≠p m·∫≠t kh·∫©u v√† 'y' th·ªß c√¥ng.
        "$PAC_WALLET" tx unbond "$validator_address"
        
        echo ""
        echo "‚úÖ L·ªánh unbond ƒë√£ ƒë∆∞·ª£c th·ª±c thi."
        echo "Vui l√≤ng ki·ªÉm tra ƒë·∫ßu ra ph√≠a tr√™n ƒë·ªÉ bi·∫øt tr·∫°ng th√°i."

        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c unbond ho·∫∑c quay v·ªÅ menu ch√≠nh." next_action_unbond
        if [[ "$next_action_unbond" =~ ^[Nn]$ ]]; then
             break
        fi

        read -p "üëâ Nh·∫≠p 'y' ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c Enter ƒë·ªÉ quay v·ªÅ menu ch√≠nh): " -n 1 -r continue_unbond
        echo ""
        if [[ ! "$continue_unbond" =~ ^[Aa]$ ]]; then
            break
        fi
    done
}

# 7 - R√∫t ph·∫ßn th∆∞·ªüng (Sau khi unbond xong)
withdraw_token() {
    echo "---"
    echo "## R√∫t ph·∫ßn th∆∞·ªüng (Sau khi unbond xong)"
    echo "---"
    if ! get_all_addresses; then
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    if [[ -z "$REWARD_ADDRESS" ]]; then
        echo "‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ Reward ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng. Vui l√≤ng ƒë·∫£m b·∫£o v√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c√≥ m·ªôt ƒë·ªãa ch·ªâ Reward."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    if ! display_live_addresses; then
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi
    echo "‚ö†Ô∏èL∆∞u √Ω:"
    echo ""
    echo "ƒê·ªÉ r√∫t ƒë∆∞·ª£c PAC, vui l√≤ng ƒë·ª£i 181440 blocks t∆∞∆°ng ƒë∆∞∆°ng 21 ng√†y sau khi unbond."
    local reward_dest_address="$REWARD_ADDRESS"
    echo "V√≠ ƒë√≠ch m·∫∑c ƒë·ªãnh (Reward address): ${reward_dest_address}"

    read -p "Nh·∫≠p s·ªë th·ª© t·ª± validator c·∫ßn withdraw: " validator_num
    local validator_address=$(get_address_by_live_index "$validator_num")

    if [[ -z "$validator_address" ]]; then
        echo "‚ùå L·ª±a ch·ªçn validator kh√¥ng h·ª£p l·ªá."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi
    if ! is_validator_address "$validator_address"; then
        echo "‚ùå ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn kh√¥ng ph·∫£i l√† ƒë·ªãa ch·ªâ Validator."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    read -p "üëâ Nh·∫≠p s·ªë l∆∞·ª£ng PAC mu·ªën r√∫t: " amount

    if [[ -z "$amount" ]]; then
        echo "‚ö†Ô∏è S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
        return
    fi

    echo ""
    echo "--- TH√îNG TIN GIAO D·ªäCH R√öT PH·∫¶N TH∆Ø·ªûNG ---"
    echo "B·∫°n s·∫Ω ƒë∆∞·ª£c y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u v√≠ v√† x√°c nh·∫≠n sau khi l·ªánh ch·∫°y."
    echo "------------------------------------------"
    echo ""
    
    "$PAC_WALLET" tx withdraw "$validator_address" "$reward_dest_address" "$amount"
    
    echo ""
    echo "‚úÖ L·ªánh r√∫t ph·∫ßn th∆∞·ªüng ƒë√£ ƒë∆∞·ª£c th·ª±c thi."
    echo "Vui l√≤ng ki·ªÉm tra ƒë·∫ßu ra ph√≠a tr√™n ƒë·ªÉ bi·∫øt tr·∫°ng th√°i."

    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh."
}

# 8 - Kh√¥i ph·ª•c v√≠ reward (Phi√™n b·∫£n c≈©)
recover_old_reward_wallet() {
    echo "---"
    echo "## Kh√¥i ph·ª•c v√≠ reward (Phi√™n b·∫£n c≈©)"
    echo "---"
    echo "L∆∞u √Ω: ƒê√¢y l√† phi√™n b·∫£n c≈© lo·∫°i m·ªói validator 1 v√≠ reward."
    echo "N·∫øu t·ª´ ƒë·∫ßu b·∫°n ƒë√£ ch·∫°y phi√™n b·∫£n m·ªõi (1 v√≠ reward chung cho t·∫•t c·∫£ validator) th√¨ kh√¥ng n√™n l√†m b∆∞·ªõc n√†y."
    echo ""
    read -p "Nh·∫≠p 'y' ƒë·ªÉ ƒë·ªìng √Ω, ho·∫∑c Enter ƒë·ªÉ quay v·ªÅ menu ch√≠nh: " -n 1 -r
    echo "" # Th√™m d√≤ng m·ªõi sau khi ƒë·ªçc input
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        "$PAC_WALLET" --path "$PAC_HOME/wallets/default_wallet" address new --type bls_account
        echo "‚úÖ L·ªánh kh√¥i ph·ª•c v√≠ reward ƒë√£ ƒë∆∞·ª£c th·ª±c thi."
    else
        echo "‚ùå H·ªßy kh√¥i ph·ª•c v√≠ reward."
    fi
    read -p "Nh·∫•n Enter ƒë·ªÉ quay v·ªÅ menu ch√≠nh."
}

# =========================================================================
# V√≤ng l·∫∑p ch√≠nh c·ªßa script
# =========================================================================
while true; do
    show_menu
    read choice
    case "$choice" in
        1) list_addresses_option ;;
        2) check_balance ;;
        3) transfer_token ;;
        4) bond_to_validator ;;
        5) unbond_validator ;;
        6) withdraw_token ;;
        7) recover_old_reward_wallet ;;
        8) show_mnemonic ;;
        9) download_snapshot ;;
        0) echo "Tho√°t kh·ªèi script. T·∫°m bi·ªát!" ; exit 0 ;;
        *) echo "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá." ; read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c." ;;
    esac
done
